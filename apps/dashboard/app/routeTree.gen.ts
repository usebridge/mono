/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as DashboardImport } from "./routes/dashboard";
import { Route as IndexImport } from "./routes/index";
import { Route as SettingsIndexImport } from "./routes/settings/index";
import { Route as PropertiesIndexImport } from "./routes/properties/index";
import { Route as ClientsIndexImport } from "./routes/clients/index";
import { Route as CalendarIndexImport } from "./routes/calendar/index";
import { Route as BookingsIndexImport } from "./routes/bookings/index";
import { Route as PropertiesPropertyIdIndexImport } from "./routes/properties/$propertyId/index";
import { Route as ClientsClientIdIndexImport } from "./routes/clients/$clientId/index";
import { Route as BookingsBookingIdIndexImport } from "./routes/bookings/$bookingId/index";
import { Route as PropertiesPropertyIdEditImport } from "./routes/properties/$propertyId/edit";

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  id: "/dashboard",
  path: "/dashboard",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const SettingsIndexRoute = SettingsIndexImport.update({
  id: "/settings/",
  path: "/settings/",
  getParentRoute: () => rootRoute,
} as any);

const PropertiesIndexRoute = PropertiesIndexImport.update({
  id: "/properties/",
  path: "/properties/",
  getParentRoute: () => rootRoute,
} as any);

const ClientsIndexRoute = ClientsIndexImport.update({
  id: "/clients/",
  path: "/clients/",
  getParentRoute: () => rootRoute,
} as any);

const CalendarIndexRoute = CalendarIndexImport.update({
  id: "/calendar/",
  path: "/calendar/",
  getParentRoute: () => rootRoute,
} as any);

const BookingsIndexRoute = BookingsIndexImport.update({
  id: "/bookings/",
  path: "/bookings/",
  getParentRoute: () => rootRoute,
} as any);

const PropertiesPropertyIdIndexRoute = PropertiesPropertyIdIndexImport.update({
  id: "/properties/$propertyId/",
  path: "/properties/$propertyId/",
  getParentRoute: () => rootRoute,
} as any);

const ClientsClientIdIndexRoute = ClientsClientIdIndexImport.update({
  id: "/clients/$clientId/",
  path: "/clients/$clientId/",
  getParentRoute: () => rootRoute,
} as any);

const BookingsBookingIdIndexRoute = BookingsBookingIdIndexImport.update({
  id: "/bookings/$bookingId/",
  path: "/bookings/$bookingId/",
  getParentRoute: () => rootRoute,
} as any);

const PropertiesPropertyIdEditRoute = PropertiesPropertyIdEditImport.update({
  id: "/properties/$propertyId/edit",
  path: "/properties/$propertyId/edit",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/dashboard": {
      id: "/dashboard";
      path: "/dashboard";
      fullPath: "/dashboard";
      preLoaderRoute: typeof DashboardImport;
      parentRoute: typeof rootRoute;
    };
    "/bookings/": {
      id: "/bookings/";
      path: "/bookings";
      fullPath: "/bookings";
      preLoaderRoute: typeof BookingsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/calendar/": {
      id: "/calendar/";
      path: "/calendar";
      fullPath: "/calendar";
      preLoaderRoute: typeof CalendarIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/clients/": {
      id: "/clients/";
      path: "/clients";
      fullPath: "/clients";
      preLoaderRoute: typeof ClientsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/properties/": {
      id: "/properties/";
      path: "/properties";
      fullPath: "/properties";
      preLoaderRoute: typeof PropertiesIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/settings/": {
      id: "/settings/";
      path: "/settings";
      fullPath: "/settings";
      preLoaderRoute: typeof SettingsIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/properties/$propertyId/edit": {
      id: "/properties/$propertyId/edit";
      path: "/properties/$propertyId/edit";
      fullPath: "/properties/$propertyId/edit";
      preLoaderRoute: typeof PropertiesPropertyIdEditImport;
      parentRoute: typeof rootRoute;
    };
    "/bookings/$bookingId/": {
      id: "/bookings/$bookingId/";
      path: "/bookings/$bookingId";
      fullPath: "/bookings/$bookingId";
      preLoaderRoute: typeof BookingsBookingIdIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/clients/$clientId/": {
      id: "/clients/$clientId/";
      path: "/clients/$clientId";
      fullPath: "/clients/$clientId";
      preLoaderRoute: typeof ClientsClientIdIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/properties/$propertyId/": {
      id: "/properties/$propertyId/";
      path: "/properties/$propertyId";
      fullPath: "/properties/$propertyId";
      preLoaderRoute: typeof PropertiesPropertyIdIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/dashboard": typeof DashboardRoute;
  "/bookings": typeof BookingsIndexRoute;
  "/calendar": typeof CalendarIndexRoute;
  "/clients": typeof ClientsIndexRoute;
  "/properties": typeof PropertiesIndexRoute;
  "/settings": typeof SettingsIndexRoute;
  "/properties/$propertyId/edit": typeof PropertiesPropertyIdEditRoute;
  "/bookings/$bookingId": typeof BookingsBookingIdIndexRoute;
  "/clients/$clientId": typeof ClientsClientIdIndexRoute;
  "/properties/$propertyId": typeof PropertiesPropertyIdIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/dashboard": typeof DashboardRoute;
  "/bookings": typeof BookingsIndexRoute;
  "/calendar": typeof CalendarIndexRoute;
  "/clients": typeof ClientsIndexRoute;
  "/properties": typeof PropertiesIndexRoute;
  "/settings": typeof SettingsIndexRoute;
  "/properties/$propertyId/edit": typeof PropertiesPropertyIdEditRoute;
  "/bookings/$bookingId": typeof BookingsBookingIdIndexRoute;
  "/clients/$clientId": typeof ClientsClientIdIndexRoute;
  "/properties/$propertyId": typeof PropertiesPropertyIdIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/dashboard": typeof DashboardRoute;
  "/bookings/": typeof BookingsIndexRoute;
  "/calendar/": typeof CalendarIndexRoute;
  "/clients/": typeof ClientsIndexRoute;
  "/properties/": typeof PropertiesIndexRoute;
  "/settings/": typeof SettingsIndexRoute;
  "/properties/$propertyId/edit": typeof PropertiesPropertyIdEditRoute;
  "/bookings/$bookingId/": typeof BookingsBookingIdIndexRoute;
  "/clients/$clientId/": typeof ClientsClientIdIndexRoute;
  "/properties/$propertyId/": typeof PropertiesPropertyIdIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/dashboard"
    | "/bookings"
    | "/calendar"
    | "/clients"
    | "/properties"
    | "/settings"
    | "/properties/$propertyId/edit"
    | "/bookings/$bookingId"
    | "/clients/$clientId"
    | "/properties/$propertyId";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/dashboard"
    | "/bookings"
    | "/calendar"
    | "/clients"
    | "/properties"
    | "/settings"
    | "/properties/$propertyId/edit"
    | "/bookings/$bookingId"
    | "/clients/$clientId"
    | "/properties/$propertyId";
  id:
    | "__root__"
    | "/"
    | "/dashboard"
    | "/bookings/"
    | "/calendar/"
    | "/clients/"
    | "/properties/"
    | "/settings/"
    | "/properties/$propertyId/edit"
    | "/bookings/$bookingId/"
    | "/clients/$clientId/"
    | "/properties/$propertyId/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DashboardRoute: typeof DashboardRoute;
  BookingsIndexRoute: typeof BookingsIndexRoute;
  CalendarIndexRoute: typeof CalendarIndexRoute;
  ClientsIndexRoute: typeof ClientsIndexRoute;
  PropertiesIndexRoute: typeof PropertiesIndexRoute;
  SettingsIndexRoute: typeof SettingsIndexRoute;
  PropertiesPropertyIdEditRoute: typeof PropertiesPropertyIdEditRoute;
  BookingsBookingIdIndexRoute: typeof BookingsBookingIdIndexRoute;
  ClientsClientIdIndexRoute: typeof ClientsClientIdIndexRoute;
  PropertiesPropertyIdIndexRoute: typeof PropertiesPropertyIdIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  BookingsIndexRoute: BookingsIndexRoute,
  CalendarIndexRoute: CalendarIndexRoute,
  ClientsIndexRoute: ClientsIndexRoute,
  PropertiesIndexRoute: PropertiesIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  PropertiesPropertyIdEditRoute: PropertiesPropertyIdEditRoute,
  BookingsBookingIdIndexRoute: BookingsBookingIdIndexRoute,
  ClientsClientIdIndexRoute: ClientsClientIdIndexRoute,
  PropertiesPropertyIdIndexRoute: PropertiesPropertyIdIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/bookings/",
        "/calendar/",
        "/clients/",
        "/properties/",
        "/settings/",
        "/properties/$propertyId/edit",
        "/bookings/$bookingId/",
        "/clients/$clientId/",
        "/properties/$propertyId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/bookings/": {
      "filePath": "bookings/index.tsx"
    },
    "/calendar/": {
      "filePath": "calendar/index.tsx"
    },
    "/clients/": {
      "filePath": "clients/index.tsx"
    },
    "/properties/": {
      "filePath": "properties/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/properties/$propertyId/edit": {
      "filePath": "properties/$propertyId/edit.tsx"
    },
    "/bookings/$bookingId/": {
      "filePath": "bookings/$bookingId/index.tsx"
    },
    "/clients/$clientId/": {
      "filePath": "clients/$clientId/index.tsx"
    },
    "/properties/$propertyId/": {
      "filePath": "properties/$propertyId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
